<?xml version="1.0" encoding="UTF-8" ?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<config>

	<requestHandler name="/replication" class="solr.ReplicationHandler">
 		<lst name="master">
			<str name="enable">${enable.master:false}</str>
        		<str name="replicateAfter">startup</str>
        		<str name="replicateAfter">commit</str>
    		</lst>
		<lst name="slave">
			<str name="enable">${enable.slave:false}</str>
        		<str name="masterUrl">http://api.index0.socialhistoryservices.org:8080/solr/all/replication</str>
			<str name="pollInterval">00:01:00</str>
 		</lst>
	</requestHandler>

    <luceneMatchVersion>LUCENE_34</luceneMatchVersion>

    <jmx/>

    <!-- Set this to 'false' if you want solr to continue working after it has
      encountered an severe configuration error.  In a production environment,
      you may want solr to keep working even if one handler is mis-configured.

      You may also set this to false using by setting the system property:
        -Dsolr.abortOnConfigurationError=false
    -->
    <abortOnConfigurationError>${solr.abortOnConfigurationError:true}</abortOnConfigurationError>

    <!-- Used to specify an alternate directory to hold all index data
other than the default ./data under the Solr home.
If replication is in use, this should match the replication configuration. -->
    <!--<dataDir>${solr.data.dir:./solr/data}</dataDir>-->


    <indexDefaults>
        <!-- Values here affect all index writers and act as a default unless overridden. -->
        <useCompoundFile>false</useCompoundFile>

        <mergeFactor>2</mergeFactor>
        <!--
        If both ramBufferSizeMB and maxBufferedDocs is set, then Lucene will flush based on whichever limit is hit first.

        -->
        <!--<maxBufferedDocs>1000</maxBufferedDocs>-->
        <!-- Tell Lucene when to flush documents to disk.
        Giving Lucene more memory for indexing means faster indexing at the cost of more RAM

        If both ramBufferSizeMB and maxBufferedDocs is set, then Lucene will flush based on whichever limit is hit first.

        -->
        <ramBufferSizeMB>32</ramBufferSizeMB>
        <maxMergeDocs>2147483647</maxMergeDocs>
        <maxFieldLength>10000</maxFieldLength>
        <writeLockTimeout>1000</writeLockTimeout>
        <commitLockTimeout>10000</commitLockTimeout>

        <!--
        Expert: Turn on Lucene's auto commit capability.

        NOTE: Despite the name, this value does not have any relation to Solr's autoCommit functionality

        -->
        <!--<luceneAutoCommit>false</luceneAutoCommit>-->
        <!--
        Expert:
        The Merge Policy in Lucene controls how merging is handled by Lucene.  The default in 2.3 is the LogByteSizeMergePolicy, previous
        versions used LogDocMergePolicy.

        LogByteSizeMergePolicy chooses segments to merge based on their size.  The Lucene 2.2 default, LogDocMergePolicy chose when
        to merge based on number of documents

        Other implementations of MergePolicy must have a no-argument constructor
        -->
        <!--<mergePolicy>org.apache.lucene.index.LogByteSizeMergePolicy</mergePolicy>-->

        <!--
        Expert:
        The Merge Scheduler in Lucene controls how merges are performed.  The ConcurrentMergeScheduler (Lucene 2.3 default)
         can perform merges in the background using separate threads.  The SerialMergeScheduler (Lucene 2.2 default) does not.
        -->
        <!--<mergeScheduler>org.apache.lucene.index.ConcurrentMergeScheduler</mergeScheduler>-->

        <!--
          As long as Solr is the only process modifying your index, it is
          safe to use Lucene's in process locking mechanism.  But you may
          specify one of the other Lucene LockFactory implementations in
          the event that you have a custom situation.

          none = NoLockFactory (typically only used with read only indexes)
          single = SingleInstanceLockFactory (suggested)
          native = NativeFSLockFactory
          simple = SimpleFSLockFactory

          ('simple' is the default for backwards compatibility with Solr 1.2)
        -->
        <lockType>single</lockType>
    </indexDefaults>

    <mainIndex>
        <!-- options specific to the main on-disk lucene index -->
        <useCompoundFile>false</useCompoundFile>
        <ramBufferSizeMB>32</ramBufferSizeMB>
        <mergeFactor>10</mergeFactor>
        <!-- Deprecated -->
        <!--<maxBufferedDocs>1000</maxBufferedDocs>-->
        <maxMergeDocs>2147483647</maxMergeDocs>
        <maxFieldLength>10000</maxFieldLength>

        <!-- If true, unlock any held write or commit locks on startup.
            This defeats the locking mechanism that allows multiple
            processes to safely access a lucene index, and should be
            used with care.
            This is not needed if lock type is 'none' or 'single'
        -->
        <unlockOnStartup>false</unlockOnStartup>
    </mainIndex>

    <!-- the default high-performance update handler -->
    <updateHandler class="solr.DirectUpdateHandler2" enable="${enable.master:false}">

        <!-- A prefix of "solr." for class names is an alias that
            causes solr to search appropriate packages, including
            org.apache.solr.(search|update|request|core|analysis)
        -->

        <!-- Limit the number of deletions Solr will buffer during doc updating.

            Setting this lower can help bound memory use during indexing.
        -->
        <maxPendingDeletes>1000</maxPendingDeletes>

        <!-- Perform a <commit/> automatically under certain conditions:

        maxDocs - number of updates since last commit is greater than this
        maxTime - oldest uncommited update (in ms) is this long ago
        -->
        <autoCommit>
            <maxDocs>100</maxDocs>
        </autoCommit>


        <!-- The RunExecutableListener executes an external command.
           exe - the name of the executable to run
           dir - dir to use as the current working directory. default="."
           wait - the calling thread waits until the executable returns. default="true"
           args - the arguments to pass to the program.  default=nothing
           env - environment variables to set.  default=nothing
        -->
        <!-- A postCommit event is fired after every commit or optimize command
        <listener event="postCommit" class="solr.RunExecutableListener">
          <str name="exe">solr/bin/snapshooter</str>
          <str name="dir">.</str>
          <bool name="wait">true</bool>
          <arr name="args"> <str>arg1</str> <str>arg2</str> </arr>
          <arr name="env"> <str>MYVAR=val1</str> </arr>
        </listener>
        -->
        <!-- A postOptimize event is fired only after every optimize command, useful
             in conjunction with index distribution to only distribute optimized indicies
        <listener event="postOptimize" class="solr.RunExecutableListener">
          <str name="exe">snapshooter</str>
          <str name="dir">solr/bin</str>
          <bool name="wait">true</bool>
        </listener>
        -->

    </updateHandler>


    <query>
        <!-- Maximum number of clauses in a boolean query... can affect
range or prefix queries that expand to big boolean
queries.  An exception is thrown if exceeded.  -->
        <maxBooleanClauses>1024</maxBooleanClauses>


        <!-- Cache used by SolrIndexSearcher for filters (DocSets),
        unordered sets of *all* documents that match a query.
        When a new searcher is opened, its caches may be prepopulated
        or "autowarmed" using data from caches in the old searcher.
        autowarmCount is the number of items to prepopulate.  For LRUCache,
        the autowarmed items will be the most recently accessed items.
      Parameters:
        class - the SolrCache implementation (currently only LRUCache)
        size - the maximum number of entries in the cache
        initialSize - the initial capacity (number of entries) of
          the cache.  (seel java.util.HashMap)
        autowarmCount - the number of entries to prepopulate from
          and old cache.
        -->
        <filterCache
                class="solr.LRUCache"
                size="512"
                initialSize="512"
                autowarmCount="256"/>

        <!-- queryResultCache caches results of searches - ordered lists of
    document ids (DocList) based on a query, a sort, and the range
    of documents requested.  -->
        <queryResultCache
                class="solr.LRUCache"
                size="512"
                initialSize="512"
                autowarmCount="256"/>

        <!-- documentCache caches Lucene Document objects (the stored fields for each document).
Since Lucene internal document ids are transient, this cache will not be autowarmed.  -->
        <documentCache
                class="solr.LRUCache"
                size="512"
                initialSize="512"
                autowarmCount="0"/>

        <!-- If true, stored fields that are not requested will be loaded lazily.

        This can result in a significant speed improvement if the usual case is to
        not load all stored fields, especially if the skipped fields are large compressed
        text fields.
        -->
        <enableLazyFieldLoading>true</enableLazyFieldLoading>

        <!-- Example of a generic cache.  These caches may be accessed by name
 through SolrIndexSearcher.getCache(),cacheLookup(), and cacheInsert().
 The purpose is to enable easy caching of user/application level data.
 The regenerator argument should be specified as an implementation
 of solr.search.CacheRegenerator if autowarming is desired.  -->
        <!--
        <cache name="myUserCache"
          class="solr.LRUCache"
          size="4096"
          initialSize="1024"
          autowarmCount="1024"
          regenerator="org.mycompany.mypackage.MyRegenerator"
          />
        -->

        <!-- An optimization that attempts to use a filter to satisfy a search.
              If the requested sort does not include score, then the filterCache
              will be checked for a filter matching the query. If found, the filter
              will be used as the source of document ids, and then the sort will be
              applied to that.
         <useFilterForSortedQuery>true</useFilterForSortedQuery>
        -->

        <!-- An optimization for use with the queryResultCache.  When a search
is requested, a superset of the requested number of document ids
are collected.  For example, if a search for a particular query
requests matching documents 10 through 19, and queryWindowSize is 50,
then documents 0 through 49 will be collected and cached.  Any further
requests in that range can be satisfied via the cache.  -->
        <queryResultWindowSize>50</queryResultWindowSize>

        <!-- Maximum number of documents to cache for any entry in the
       queryResultCache. -->
        <queryResultMaxDocsCached>200</queryResultMaxDocsCached>

        <!-- This entry enables an int hash representation for filters (DocSets)
when the number of items in the set is less than maxSize.  For smaller
sets, this representation is more memory efficient, more efficient to
iterate over, and faster to take intersections.  -->
        <HashDocSet maxSize="3000" loadFactor="0.75"/>

        <!-- a newSearcher event is fired whenever a new searcher is being prepared
and there is a current searcher handling requests (aka registered). -->
        <!-- QuerySenderListener takes an array of NamedList and executes a
local query request for each NamedList in sequence. -->
        <listener event="newSearcher" class="solr.QuerySenderListener">
            <arr name="queries">
                <lst>
                    <str name="q">[* TO *]</str>
                    <str name="start">0</str>
                    <str name="rows">10</str>
                    <str name="facet">true</str>
                    <str name="facet.limit">10</str>
                    <str name="facet.mincount">1</str>
                </lst>
                <lst>
                    <str name="q">static newSearcher warming query from solrconfig.xml</str>
                </lst>
            </arr>
        </listener>

        <!-- a firstSearcher event is fired whenever a new searcher is being
 prepared but there is no current registered searcher to handle
 requests or to gain autowarming data from. -->
        <listener event="firstSearcher" class="solr.QuerySenderListener">
            <arr name="queries">
            </arr>
        </listener>

        <!-- If a search request comes in and there is no current registered searcher,
       then immediately register the still warming searcher and use it.  If
       "false" then all requests will block until the first searcher is done
       warming. -->
        <useColdSearcher>false</useColdSearcher>

        <!-- Maximum number of searchers that may be warming in the background
concurrently.  An error is returned if this limit is exceeded. Recommend
1-2 for read-only slaves, higher for masters w/o cache warming. -->
        <maxWarmingSearchers>4</maxWarmingSearchers>

    </query>

    <!--
    Let the dispatch filter handler /select?qt=XXX
    handleSelect=true will use consistent error handling for /select and /update
    handleSelect=false will use solr1.1 style error formatting
    -->
    <requestDispatcher handleSelect="true">
        <!--Make sure your system has some authentication before enabling remote streaming!  -->
        <requestParsers enableRemoteStreaming="false" multipartUploadLimitInKB="2048"/>

        <!-- Set HTTP caching related parameters (for proxy caches and clients).

             To get the behaviour of Solr 1.2 (ie: no caching related headers)
             use the never304="true" option and do not specify a value for
             <cacheControl>
        -->
        <httpCaching never304="true">
            <!--httpCaching lastModifiedFrom="openTime"
            etagSeed="Solr"-->
            <!-- lastModFrom="openTime" is the default, the Last-Modified value
                 (and validation against If-Modified-Since requests) will all be
                 relative to when the current Searcher was opened.
                 You can change it to lastModFrom="dirLastMod" if you want the
                 value to exactly corrispond to when the physical index was last
                 modified.

                 etagSeed="..." is an option you can change to force the ETag
                 header (and validation against If-None-Match requests) to be
                 differnet even if the index has not changed (ie: when making
                 significant changes to your config file)

                 lastModifiedFrom and etagSeed are both ignored if you use the
                 never304="true" option.
            -->
            <!-- If you include a <cacheControl> directive, it will be used to
                 generate a Cache-Control header, as well as an Expires header
                 if the value contains "max-age="

                 By default, no Cache-Control header is generated.

                 You can use the <cacheControl> option even if you have set
                 never304="true"
            -->
            <!-- <cacheControl>max-age=30, public</cacheControl> -->
        </httpCaching>
    </requestDispatcher>


    <!-- requestHandler plugins... incoming queries will be dispatched to the
       correct handler based on the path or the qt (query type) param.
       Names starting with a '/' are accessed with the a path equal to the
       registered name.  Names without a leading '/' are accessed with:
        http://host/app/select?qt=name
       If no qt is defined, the requestHandler that declares default="true"
       will be used.
    -->
    <requestHandler name="standard" class="solr.StandardRequestHandler" default="true">
        <!-- default values for query parameters -->
        <lst name="defaults">
            <str name="echoParams">explicit</str>
            <!--
           <int name="rows">10</int>
           <str name="fl">*</str>
           <str name="version">2.1</str>
            -->
        </lst>
    </requestHandler>

    <requestHandler name="/oai" default="false" class="org.socialhistoryservices.api.oai.OAIRequestHandler"
                    enable="${enable.slave:false}">

        <!-- WT is the key for the queryResponseWriter (see below) -->
        <str name="wt">oai</str>

        <!-- the oai_home is a path relative to the solr.home directory.
        The default is [solr_home]/oai
        In this folder the xsl stylesheets, ListMetadataPrefix.xml, Identify.xml and ListSets.xsl must be placed.
        -->
        <str name="oai_home">/oai</str>

        <!-- the base url -->
        <str name="proxyurl">http://api.socialhistoryservices.org/solr/all/oai</str>

        <!-- index of the oai identifier user for the -identifier parameter -->
        <str name="field_index_identifier">iisg_identifier</str>

        <!-- The prefix will be stripped from the oai identifier value, before it is passed
        to the Solr Lucene query. For example, if your index contains
         Solr identifiers such as:
         id12345
        then an OAI request like GetRecord&identifier=oai:mydomain:id12345
         is rewritten as id12345
        -->
        <str name="prefix">oai:socialhistoryservices.org:</str>

        <!-- the field that can be used for the -from and -until  values -->
        <str name="field_index_datestamp">iisg_date_modified</str>

        <!-- the field that can be used to sort datestamps. It is relevant
        to have a sortable field for your datestamp when having paged OAI2
        results. -->
        <str name="field_sort_datestamp">iisg_date_modified</str>

        <!-- index for the -set value -->
        <str name="field_index_set">iisg_collectionName</str>

        <!-- Some documents may be large or small, depending on the schema.
        In that case, we set the step of the paging to a lower count. -->
        <lst name="maxrecords">
            <int name="default">200</int>
            <int name="ead">1</int>
            <int name="eci">1</int>
        </lst>

        <!-- The resumption token is build up from string parameters (from,until,set and metadataprefix). The separator
        character is a regular expression that is used to divide them up.-->
        <int name="resumptionTokenExpirationInSeconds">86400</int>
        <str name="resumptionTokenSeparator">,</str>
    </requestHandler>

    <!-- Custom wt that is being used by the OAI handler -->
    <queryResponseWriter name="oai" default="false" class="org.socialhistoryservices.api.oai.OAIQueryResponseWriter"
                         enable="${enable.slave:false}"/>

    <!-- Custom IISG SRU handler.
    If you use multicore and want to use a specific SRW implementation for each core, then you can
    set the str[@name=solr.data] and str[@name=explain] fields accordingly.
    -->
    <requestHandler name="/srw" class="org.socialhistory.solr.sru.SRURequestHandler" enable="${enable.slave:false}">
        <str name="wt">srw</str>
        <lst name="srw_properties">
            <!--
               Set this value to use a folder other than the core's solr.home config directory.
               All paths you specify here are relative to this folder.
           <str name="SRW.Context"></str>-->
            <!--
               You can also specify databaseInfo and metaInfo in the explain.xml document. The values
               used here are for the xslt processor
            -->
            <str name="dbname">Our SRW database</str>

            <int name="maximumTerms">100</int>
            <int name="maximumRecords">50</int>

            <str name="xmlSchemas">solr dc marcxml ead</str>
            <str name="defaultSchema">marcxml</str>

            <str name="solr.identifier">info:srw/cql-context-set/2/solr</str>
            <str name="solr.transformer">/srw/solr.xsl</str>
            <str name="solr.location">.</str>
            <str name="solr.title">Solr response format</str>
            <!--
            If you want to add some parameters to the stylesheet...
            <str name="solr.parameter.p1">p1</str>
            <str name="solr.parameter.p2">p2</str>
            -->

            <str name="dc.identifier">info:srw/schema/1/dc-v1.1</str>
            <str name="dc.transformer">/srw/dc-v1.1.xsl</str>
            <str name="dc.location">.</str>
            <str name="dc.title">Simple Dublin Core: http://purl.org/dc/elements/1.1/</str>

            <str name="marcxml.identifier">info:srw/schema/1/marcxml-v1.1</str>
            <str name="marcxml.transformer">/srw/marcxml-v1.1.xsl</str>
            <str name="marcxml.location">.</str>
            <str name="marcxml.title">Slim MarcXml: http://www.loc.gov/MARC21/slim</str>

            <str name="ead.identifier">info:srw/schema/1/ead-2002</str>
            <str name="ead.transformer">/srw/ead-2002.xsl</str>
            <str name="ead.location">.</str>
            <str name="ead.title">EAD Version 2002</str>

            <!-- System xslts... -->
            <str name="system.xmlSchemas">cql-2-lucene xml-2-json</str>
            <str name="cql-2-lucene.identifier">cql-2-lucene</str>
            <str name="cql-2-lucene.transformer">/srw/cql-2-lucene.xsl</str>
            <str name="cql-2-lucene.location">.</str>
            <str name="cql-2-lucene.title">Converts an CQL query into a Lucene console query string</str>

            <str name="explainStyleSheet">/styles/explainResponse.xsl</str>
            <str name="searchStyleSheet">/styles/searchRetrieveResponse.xsl</str>
            <str name="scanStyleSheet">/styles/scanResponse.xsl</str>

            <str name="explain">/srw/explain.all.xml</str>

            <str name="xml-2-json.identifier">xml-2-json</str>
            <str name="xml-2-json.transformer">/srw/xml-2-json.xsl</str>
            <str name="xml-2-json.location">.</str>
            <str name="xml-2-json.parameter.debug">false</str>
            <str name="xml-2-json.parameter.use-rabbitfish">true</str>
            <str name="xml-2-json.parameter.use-badgerfish">false</str>
            <str name="xml-2-json.parameter.use-rayfish">false</str>
            <str name="xml-2-json.parameter.use-namespaces">false</str>
            <str name="xml-2-json.parameter.skip-root">false</str>
            <str name="xml-2-json.callbackkey">callback</str>

        </lst>

        <!--
            Extensions we allow to be downloaded from the srw folder.
        -->
        <str name="downloadable.resources">(^.*\.xsl$|^.*\.xslt$|^.*\.css$)</str>

        <!-- SimpleFacetParameters
                Set to include FacetedResults in the ExtraResponseData. The setting will call method:
                SimpleFacets::NamedList getFieldCacheCounts(SolrIndexSearcher searcher, DocSet docs, String fieldName, int offset, int limit, int mincount, boolean missing, String sort, String prefix)
                and will produce a facet of list of FacetedResults

                These parameters are the same as described in:
                http://wiki.apache.org/solr/SimpleFacetParameters
                Such as: facet.field, facet.query,facet.prefix,facet.limit, etc.

                Do not use Lucene fieldnames in facet.field, but the CQL indices you mapped to Lucene index fields in the
                explain.xml document's indexInfo element.
                For example, use: <str name="facet.field">dc.creator</str> but NOT <str name="facet.field">author</str>

                The use of facet.query may lead to unpredictable results

                You may want to add the same facet str parameters to the solr.QuerySenderListener.arr.queries.lst
        -->
        <lst name="facets">
            <str name="facet.field">dc.contributor</str>
            <str name="facet.field">dc.subject</str>
            <str name="facet.limit">10</str>
            <str name="facet.mincount">1</str>
        </lst>

    </requestHandler>

    <!-- Custom IISG wt that is being called from the SRU handler -->
    <queryResponseWriter name="srw" default="false" class="org.socialhistory.solr.sru.SRUQueryResponseWriter"
                         enable="${enable.slave:false}"/>
    <!--
    Search components are registered to SolrCore and used by Search Handlers
    By default, the following components are avaliable:

    <searchComponent name="query" class="org.apache.solr.handler.component.QueryComponent"/>
    <searchComponent name="facet" class="org.apache.solr.handler.component.FacetComponent"/>
    <searchComponent name="mlt" class="org.apache.solr.handler.component.MoreLikeThisComponent"/>
    <searchComponent name="highlight" class="org.apache.solr.handler.component.HighlightComponent"/>
    <searchComponent name="debug" class="org.apache.solr.handler.component.DebugComponent"/>
    If you register a searchComponent to one of the standard names, that will be used instead.
    -->

    <requestHandler name="/search" class="org.apache.solr.handler.component.SearchHandler">
        <lst name="defaults">
            <str name="echoParams">explicit</str>
        </lst>
        <!--
        By default, this will register the following components:

        <arr name="components">
          <str>query</str>
          <str>facet</str>
          <str>mlt</str>
          <str>highlight</str>
          <str>debug</str>
        </arr>

        To insert handlers before or after the 'standard' components, use:

        <arr name="first-components">
          <str>first</str>
        </arr>

        <arr name="last-components">
          <str>last</str>
        </arr>

        -->

    </requestHandler>


    <!-- Update request handler.
  
       Note: Since solr1.1 requestHandlers requires a valid content type header if posted in 
       the body. For example, curl now requires: -H 'Content-type:text/xml; charset=utf-8'
       The response format differs from solr1.1 formatting and returns a standard error code.
       
       To enable solr1.1 behavior, remove the /update handler or change its path
       
       "update.processor.class" is the class name for the UpdateRequestProcessor.  It is initalized
       only once.  This can not be changed for each request.
    -->
    <requestHandler name="/update" class="solr.XmlUpdateRequestHandler" enable="${enable.master:false}">
        <!--
        <str name="update.processor.class">org.apache.solr.handler.UpdateRequestProcessor</str>
        -->
    </requestHandler>

    <!--
    Analysis request handler.  Since Solr 1.3.  Use to returnhow a document is analyzed.  Useful
    for debugging and as a token server for other types of applications
    -->
    <requestHandler name="/analysis" class="solr.AnalysisRequestHandler" enable="${enable.master:false}">
        <!--
        <str name="update.processor.class">org.apache.solr.handler.UpdateRequestProcessor</str>
        -->
    </requestHandler>

    <!-- CSV update handler, loaded on demand -->
    <requestHandler name="/update/csv" class="solr.CSVRequestHandler" enable="${enable.master:false}" startup="lazy"/>


    <!--
     Admin Handlers - This will register all the standard admin RequestHandlers.  Adding
     this single handler is equivolent to registering:

    <requestHandler name="/admin/luke"       class="org.apache.solr.handler.admin.LukeRequestHandler" />
    <requestHandler name="/admin/system"     class="org.apache.solr.handler.admin.SystemInfoHandler" />
    <requestHandler name="/admin/plugins"    class="org.apache.solr.handler.admin.PluginInfoHandler" />
    <requestHandler name="/admin/threads"    class="org.apache.solr.handler.admin.ThreadDumpHandler" />
    <requestHandler name="/admin/properties" class="org.apache.solr.handler.admin.PropertiesRequestHandler" />
    <requestHandler name="/admin/file"       class="org.apache.solr.handler.admin.ShowFileRequestHandler" >

    If you wish to hide files under ${solr.home}/conf, explicitly register the ShowFileRequestHandler using:
    <requestHandler name="/admin/file" class="org.apache.solr.handler.admin.ShowFileRequestHandler" >
      <lst name="invariants">
       <str name="hidden">synonyms.txt</str>
       <str name="hidden">anotherfile.txt</str>
      </lst>
    </requestHandler>
    -->
    <requestHandler name="/admin/" class="org.apache.solr.handler.admin.AdminHandlers" enable="${enable.master:false}"/>

    <!-- ping/healthcheck -->
    <requestHandler name="/admin/ping" class="PingRequestHandler">
        <lst name="defaults">
            <str name="qt">standard</str>
            <str name="q">solrpingquery</str>
            <str name="echoParams">all</str>
        </lst>
    </requestHandler>

    <!-- Echo the request contents back to the client -->
    <requestHandler name="/debug/dump" class="solr.DumpRequestHandler">
        <lst name="defaults">
            <str name="echoParams">explicit</str>
            <!-- for all params (including the default etc) use: 'all' -->
            <str name="echoHandler">true</str>
        </lst>
    </requestHandler>

    <!-- queryResponseWriter plugins... query responses will be written using the
        writer specified by the 'wt' request parameter matching the name of a registered
        writer.
        The "default" writer is the default and will be used if 'wt' is not specified
        in the request. XMLResponseWriter will be used if nothing is specified here.
        The json, python, and ruby writers are also available by default.
    -->
    <queryResponseWriter name="xml" class="org.apache.solr.response.XMLResponseWriter" default="true"/>
    <!--
        <queryResponseWriter name="custom" class="com.example.MyResponseWriter"/>
    -->

    <!-- XSLT response writer transforms the XML output by any xslt1 file found
        in Solr's conf/xslt1 directory.  Changes to xslt1 files are checked for
        every xsltCacheLifetimeSeconds.

   <queryResponseWriter name="xslt" class="org.apache.solr.request.XSLTResponseWriter">
     <int name="xsltCacheLifetimeSeconds">5</int>
   </queryResponseWriter> -->

    <!-- config for the admin interface -->
    <admin>
        <defaultQuery>*:*</defaultQuery>

        <!-- configure a healthcheck file for servers behind a loadbalancer
        <healthcheck type="file">server-enabled</healthcheck>
        -->
    </admin>

    <!-- Mention the location of the datasets in the "handlers" list. To call via /dih/[handle name] -->
    <requestHandler name="/dih" class="org.socialhistory.solr.importer.DataImportHandlers" enable="${enable.master:false}">
        <lst name="defaults">
            <str name="debugTraceFolder">/data/datasets/test</str>
        </lst>
        <lst name="handlers">
            <str name="ahm.afbeeldingen.1"/>
            <str name="aletta.afbeeldingen.1"/>
            <str name="aletta.archieven.1"/>
            <str name="aletta.bibliotheek.1"/>
            <str name="aletta.verhalen.1"/>
            <str name="continium.afbeeldingen.1"/>
            <str name="diep.afbeeldingen.1"/>
            <str name="diep.archieven.1"/>
            <str name="eemland.afbeeldingen.1.a"/>
            <str name="eemland.afbeeldingen.1.b"/>
            <str name="eemland.archieven.1"/>
            <str name="gar.afbeeldingen.1"/>
            <str name="gar.archieven.1"/>
            <str name="harderwijk.afbeeldingen.1"/>
            <str name="hbm.afbeeldingen.1"/>
            <str name="hmr.afbeeldingen.1"/>
            <str name="iish.archieven"/>
            <str name="iish.archieven.delete"/>
            <str name="iish.evergreen.biblio"/>
            <str name="iish.eci"/>
            <str name="iish.eci.delete"/>
            <str name="limburgsmuseum.afbeeldingen.1"/>
            <str name="muma.afbeeldingen.1"/>
            <str name="na.archieven.1"/>
            <str name="openlucht.afbeeldingen.1"/>
            <str name="persmuseum.afbeeldingen.1"/>
            <str name="ral.afbeeldingen.1"/>
            <str name="ran.afbeeldingen.1"/>
            <str name="ran.turksecollectie.1"/>
            <str name="saa.archieven.1"/>
            <str name="zearch.afbeeldingen.1"/>
            <str name="zebi.afbeeldingen.1"/>
            <str name="irsh.sgm"/>
            <str name="irsh.jats-2.2"/>
        </lst>
    </requestHandler>

</config>
